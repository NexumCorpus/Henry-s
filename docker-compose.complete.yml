version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: henrys-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-henrys_smartstock}
      POSTGRES_USER: ${POSTGRES_USER:-henrys_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - henrys-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-henrys_user} -d ${POSTGRES_DB:-henrys_smartstock}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: henrys-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - henrys-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: henrys-backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-henrys_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-henrys_smartstock}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:80}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WORKERS=${BACKEND_WORKERS:-4}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - henrys-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Frontend (React + Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8000/api/v1}
        - VITE_WS_URL=${VITE_WS_URL:-ws://localhost:8000/ws}
        - VITE_ENVIRONMENT=production
    container_name: henrys-frontend
    ports:
      - "3000:80"  # Frontend on port 3000
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - henrys-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy (Routes traffic to frontend/backend)
  nginx:
    image: nginx:alpine
    container_name: henrys-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-complete.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - ./frontend/dist:/usr/share/nginx/html:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - henrys-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Database Backup Service (runs daily)
  backup:
    image: postgres:15-alpine
    container_name: henrys-backup
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-henrys_smartstock}
      - POSTGRES_USER=${POSTGRES_USER:-henrys_user}
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: |
      sh -c '
        echo "Backup service started"
        while true; do
          sleep 86400  # Wait 24 hours
          echo "Starting daily backup..."
          pg_dump -h postgres -U ${POSTGRES_USER:-henrys_user} -d ${POSTGRES_DB:-henrys_smartstock} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          echo "Backup completed"
          # Keep only last 7 days of backups
          find /backups -name "backup_*.sql" -mtime +7 -delete
        done
      '
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - henrys-network
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis

networks:
  henrys-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16